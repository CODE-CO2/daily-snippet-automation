name: Daily Snippet Uploader

on:
  push:
    paths:
      - "snippets/**"            # snippets/ ÏïàÏóê ÌååÏùºÏù¥ ÏÉùÍ∏∞Î©¥ ÏûêÎèô ÏóÖÎ°úÎìú
  schedule:
    - cron: "0 0 * * *"          # Îß§Ïùº 00:00 UTC (KST 09:00)
  workflow_dispatch:              # ÏàòÎèô Ïã§ÌñâÏö© ÏûÖÎ†•Í∞í
    inputs:
      date:
        description: "ÏóÖÎ°úÎìú ÎÇ†Ïßú (YYYY-MM-DD, ÎπÑÏö∞Î©¥ Ïò§Îäò KST)"
        required: false
      content:
        description: "ÏßÅÏ†ë ÏóÖÎ°úÎìúÌï† Ïä§ÎãàÌé´ ÎÇ¥Ïö©(ÏÑ†ÌÉù)"
        required: false
      user_email:
        description: "ÏóÖÎ°úÎìú ÎåÄÏÉÅ ÏÇ¨Ïö©Ïûê Ïù¥Î©îÏùº(ÏÑ†ÌÉù, ÎØ∏ÏûÖÎ†• Ïãú Îß§Ìïë/Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©)"
        required: false
      team_name:
        description: "ÌåÄ Ïù¥Î¶Ñ(ÏÑ†ÌÉù, ÎØ∏ÏûÖÎ†• Ïãú Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©)"
        required: false

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}        # Ïòà: https://gqfegtdjewnadcmksktg.supabase.co
  SUPABASE_APIKEY: ${{ secrets.SUPABASE_APIKEY }}  # anon ÌÇ§ ÎòêÎäî Ï†ÅÌï©Ìïú ÌÇ§
  SUPABASE_AUTH: ${{ secrets.SUPABASE_AUTH }}      # service role ÎòêÎäî Ï†ÅÌï©Ìïú Bearer ÌÜ†ÌÅ∞

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Pick date/content/user/team
        id: pick
        shell: bash
        run: |
          set -euo pipefail

          # 1) ÎÇ†Ïßú(KST, Í∏∞Î≥∏ Ïò§Îäò)
          if [[ -n "${{ github.event.inputs.date || '' }}" ]]; then
            DATE="${{ github.event.inputs.date }}"
          else
            DATE="$(TZ=Asia/Seoul date +%F)"
          fi
          echo "date=$DATE" >> "$GITHUB_OUTPUT"

          # 2) ÎÇ¥Ïö©: ÏûÖÎ†•Í∞í>snippets/YYYY-MM-DD.md>Í∏∞Î≥∏ Î¨∏Íµ¨
          if [[ -n "${{ github.event.inputs.content || '' }}" ]]; then
            CONTENT="${{ github.event.inputs.content }}"
          else
            FILE="snippets/${DATE}.md"
            if [[ -f "$FILE" ]]; then
              CONTENT="$(cat "$FILE")"
            else
              CONTENT="(ÏûêÎèô ÏóÖÎ°úÎìú) ${DATE}Ïùò Ïä§ÎãàÌé´ ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§."
            fi
          fi

          # JSONÏóê ÏïàÏ†ÑÌïòÍ≤å ÎÑ£ÎèÑÎ°ù escape
          CONTENT_JSON="$(printf '%s' "$CONTENT" | jq -Rs '.')"
          echo "content_json=$CONTENT_JSON" >> "$GITHUB_OUTPUT"

          # 3) ÏóÖÎ°úÎìú ÎåÄÏÉÅ Ïù¥Î©îÏùº:
          # (Ïö∞ÏÑ†ÏàúÏúÑ) ÏûÖÎ†•Í∞í > COLLABORATORS_JSON Îß§Ìïë > DEFAULT_USER_EMAIL
          USER_EMAIL_INPUT="${{ github.event.inputs.user_email || '' }}"
          if [[ -n "$USER_EMAIL_INPUT" ]]; then
            USER_EMAIL="$USER_EMAIL_INPUT"
          else
            # secrets.COLLABORATORS_JSON Ïòà:
            # {"eun-ho1":"eq.jeh0224@gachon.ac.kr","teammate1":"abc@domain.com"}
            if [[ -n "${{ secrets.COLLABORATORS_JSON || '' }}" ]]; then
              GH="${{ github.actor }}"
              USER_EMAIL="$(jq -r --arg gh "$GH" '.[ $gh ] // empty' <<< '${{ secrets.COLLABORATORS_JSON }}')"
            fi
            if [[ -z "${USER_EMAIL:-}" ]]; then
              USER_EMAIL="${{ secrets.DEFAULT_USER_EMAIL }}"
            fi
          fi
          if [[ -z "${USER_EMAIL:-}" ]]; then
            echo "::error::USER_EMAILÏùÑ Í≤∞Ï†ïÌï† Ïàò ÏóÜÏäµÎãàÎã§. user_email ÏûÖÎ†• ÎòêÎäî Îß§Ìïë/Í∏∞Î≥∏Í∞íÏùÑ ÏÑ§Ï†ïÌïòÏÑ∏Ïöî."
            exit 1
          fi
          echo "user_email=$USER_EMAIL" >> "$GITHUB_OUTPUT"

          # 4) ÌåÄ Ïù¥Î¶Ñ: ÏûÖÎ†•Í∞í > Í∏∞Î≥∏Í∞í
          if [[ -n "${{ github.event.inputs.team_name || '' }}" ]]; then
            TEAM_NAME="${{ github.event.inputs.team_name }}"
          else
            TEAM_NAME="${{ secrets.DEFAULT_TEAM_NAME }}"
          fi
          if [[ -z "${TEAM_NAME:-}" ]]; then
            TEAM_NAME="default-team"
          fi
          echo "team_name=$TEAM_NAME" >> "$GITHUB_OUTPUT"

      - name: Validate secrets
        shell: bash
        run: |
          set -e
          [[ -n "$SUPABASE_URL" ]] || { echo "::error::SUPABASE_URLÏù¥ ÎπÑÏñ¥ ÏûàÏäµÎãàÎã§"; exit 1; }
          [[ -n "$SUPABASE_APIKEY" ]] || { echo "::error::SUPABASE_APIKEYÍ∞Ä ÎπÑÏñ¥ ÏûàÏäµÎãàÎã§"; exit 1; }
          [[ -n "$SUPABASE_AUTH" ]]  || { echo "::error::SUPABASE_AUTHÍ∞Ä ÎπÑÏñ¥ ÏûàÏäµÎãàÎã§"; exit 1; }
          echo "‚úÖ Secrets OK"

      - name: Upload to Supabase (REST)
        id: call
        shell: bash
        run: |
          set -euo pipefail

          API="${SUPABASE_URL%/}/rest/v1/snippets?select=*"

          # payload Ï°∞Î¶Ω(Î™®Îì† Í∞í JSON-safe)
          PAYLOAD="$(jq -n \
            --arg d   "${{ steps.pick.outputs.date }}" \
            --arg em  "${{ steps.pick.outputs.user_email }}" \
            --arg tn  "${{ steps.pick.outputs.team_name }}" \
            --argjson ct ${{ steps.pick.outputs.content_json }} \
            '{snippet_date:$d, user_email:$em, team_name:$tn, content:$ct}')"

          echo "üîé Endpoint: $API"
          echo "üîé Payload: $PAYLOAD"

          # ÏöîÏ≤≠
          RESP="$(curl -sS -w '\nHTTP_CODE:%{http_code}\n' -X POST "$API" \
            -H "apikey: $SUPABASE_APIKEY" \
            -H "Authorization: Bearer $SUPABASE_AUTH" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=representation" \
            -d "$PAYLOAD")"

          echo "$RESP"

          CODE="$(grep -a 'HTTP_CODE:' <<< "$RESP" | tail -n1 | cut -d: -f2)"
          if [[ "$CODE" != 200 && "$CODE" != 201 ]]; then
            echo "::error::ÏóÖÎ°úÎìú Ïã§Ìå® (HTTP $CODE)"
            exit 1
          fi
          echo "‚úÖ ÏóÖÎ°úÎìú ÏÑ±Í≥µ (HTTP $CODE)"
